---
import { createClient } from "@supabase/supabase-js";
import type {
  HomeAssistantEntities,
  HomeAssistantEntity,
  HomeAssistantMetadata,
} from "../types/homeassistant";


const supabase = createClient(
  import.meta.env.SUPABASE_URL,
  import.meta.env.SUPABASE_KEY
);

const { data: homeassistant_metadata_response } = await supabase
  .from("homeassistant_metadata")
  .select("*")
  .single();
const homeassistant_metadata: HomeAssistantMetadata =
  homeassistant_metadata_response as unknown as HomeAssistantMetadata;

if (!homeassistant_metadata?.provisioned) {
  console.error("Not provisioned");
}

let { data: homeassistant_entities_response } = await supabase
  .from("homeassistant_entities")
  .select("*")
  .order("created_at", { ascending: false });
const homeassistant_entities_per_entity =
  homeassistant_entities_response?.reduce((entities, entity) => {
    if (entities[entity.entity_id]) {
      entities[entity.entity_id].push(entity);
    } else {
      entities[entity.entity_id] = [entity];
    }
    return entities;
  }, {} as Record<string, Array<HomeAssistantEntity>>);

const homeassistant_entities: Array<HomeAssistantEntities> =
  homeassistant_entities_per_entity
    ? Object.entries(homeassistant_entities_per_entity).sort(
        ([oldId], [newId]) => oldId.localeCompare(newId)
      )
    : [];
---

{
  homeassistant_metadata?.provisioned ? (
    <div class="container">
        {homeassistant_entities.map(([entity_id, states]: [string, Array<HomeAssistantEntity>]) => (
          <div>
            <h3>{states[0].attributes?.friendly_name || entity_id}</h3>
            <p>
              {`${states[0].state}${states[0].attributes?.unit_of_measurement}`}
              <br />({states.length} records)
            </p>
          </div>
        ))}
    </div>
  ) : (
    <p>Not provisioned</p>
  )
}

<style lang="css">
  h3 {
    margin: 0.6rem 0 0;
  }
  p {
    margin: 0.2rem 0;
  }
  .container {
    display: flex;
    flex-direction: column;
    margin: 0 auto;
  }
</style>
